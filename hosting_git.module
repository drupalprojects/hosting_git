<?php
/**
 * @file
 * Provides common Git functions.
 */

define('HOSTING_GIT_WEBHOOK_STATUS_OK', 1);
define('HOSTING_GIT_WEBHOOK_STATUS_ACCESS_DENIED', 2);
define('HOSTING_GIT_WEBHOOK_STATUS_INVALID_CODE', 3);

// These are github's Webhook callback IPs.
// This list grows occaisonally, update it as needed.
define('HOSTING_GIT_WEBHOOK_DEFAULT_ALLOWED_IPS', "
204.232.175.64/27
192.30.252.0/22
");


/**
 * Implements hook_menu().
 */
function hosting_git_menu() {
  $items['admin/hosting/git'] = array(
    'title' => 'Git',
    'description' => 'Configure Git integration',
    'file' => 'hosting_git.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hosting_git_settings_form'),
    'access arguments' => array('administer hosting settings'),
    'tab_parent' => 'admin/hosting',
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_node_type_view().
 */
function hosting_git_node_view($node) {
  if (!empty($node->git['repo_url'])) {
    $node->content['info']['repo_url'] = array(
      '#type' => 'item',
      '#title' => t('Git URL'),
      '#weight' => 100,
      '#markup' => check_plain($node->git['repo_url']),
    );
    $ref = $node->git['git_ref'] ? $node->git['git_ref'] : t('Pending Verification');
    $node->content['info']['git_ref'] = array(
      '#type' => 'item',
      '#title' => t('Git reference'),
      '#weight' => 100,
      '#markup' => $ref,
    );
  }
}

/**
 * Private function to delete git data for a node.
 */
function _hosting_git_delete_record($node) {
  db_delete('hosting_git')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Private function to add git data to a node object.
 */
function _hosting_git_node_load_data(&$node) {
  $r = db_query('SELECT * FROM {hosting_git} WHERE nid = :nid', array(':nid' => $node->nid));
  if ($result = $r->fetchObject()) {
    if (!isset($node->git)) {
      $node->git = array();
    }

    $node->git['repo_url'] = $result->repo_url;
    $node->git['git_ref'] = $result->git_ref;
  }
  else {
    _hosting_git_node_load_defaults($node);
  }
}

/**
 * Private function to initialize default values for a node object.
 */
function _hosting_git_node_load_defaults(&$node) {
  if (!isset($node->git)) {
    $node->git = array();
  }

  if (!isset($node->git['repo_url'])) {
    $node->git['repo_url'] = '';
  }

  if (!isset($node->git['git_ref'])) {
    $node->git['git_ref'] = 'master';
  }
}

/**
 * Private function to insert or update git data.
 */
function _hosting_git_upsert($node) {
  if (empty($node->git['repo_url']) || empty($node->git['git_ref'])) {
    _hosting_git_node_load_defaults($node);
  }

  db_merge('hosting_git')
    ->key(array('nid' => $node->nid))
    ->fields(array(
      'repo_url' => $node->git['repo_url'],
      'git_ref' => $node->git['git_ref'],
    ))
    ->execute();
}

/**
 * Helper function to add Git form elements.
 **/
function hosting_git_add_form_elements(&$form) {
  $form['git'] = array(
    '#type' => 'fieldset',
    '#tree' => TRUE,
    '#title' => t('Deploy from Git'),
    '#collapsible' => TRUE,
    '#weight' => -1,
  );

  $node = $form['#node'];

  if (!isset($node->nid) || (!$node->verified && !isset($node->git['repo_url']))) {
    $form['git']['repo_url'] = array(
      '#type' => 'textfield',
      '#title' => 'Repository URL',
      '#description' => t('The full URL that you would pass to <em>git clone</em>. Example:  git@github.com:username/project.git or https://github.com/username/project.git. Note that this repository must be accessible by the Aegir user.'),
      '#default_value' => isset($node->git['repo_url']) ? $node->git['repo_url'] : '',
    );

    $form['git']['git_ref'] = array(
      '#type' => 'textfield',
      '#title' => 'Branch or tag name',
      '#default_value' => isset($node->git['git_ref']) ? $node->git['git_ref'] : 'master',
    );
  }
  else {
    // Display it.
    $form['git']['repo_url_display'] = array(
      '#type' => 'item',
      '#title' => t('Repo URL'),
      '#markup' => $node->git['repo_url'],
    );
    $form['git']['git_ref_display'] = array(
      '#type' => 'item',
      '#title' => 'Branch or tag name',
      '#markup' => isset($node->git['git_ref']) ? $node->git['git_ref'] : 'master',
      '#description' => 'Use a checkout task to change this value.',
    );
  }
}

/**
 * Check to see if the target dir is empty.
 */
function _hosting_git_isdirempty($dir) {
  if ($handle = @opendir($dir)) {
    // Open directory.
    while (($file = readdir($handle)) !== FALSE) {
      if ($file != "." && $file != "..") {
        closedir($handle); // Close directory.
        return FALSE;
      }
    }
    closedir($handle); // Close directory.
  }
  return TRUE;
}

/**
 * Get the path to the site specific directory.
 *
 * e.g. /var/aegir/platforms/drupal-7.x/sites/example.com
 */
function _hosting_git_getsitepath($node) {
  // Select the platform publish_path for $node->platform.
  $platform_publishpath = db_query("SELECT publish_path FROM {hosting_platform} WHERE nid = :nid", array(':nid' => $node->platform))->fetchField();

  if ($platform_publishpath) {
    return $platform_publishpath . '/sites/' . $node->title;
  }
  else {
    return FALSE;
  }
}
